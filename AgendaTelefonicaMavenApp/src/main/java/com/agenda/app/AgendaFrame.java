/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.agenda.app;


import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author duque
 */
public class AgendaFrame extends javax.swing.JFrame {
    
    private static final String ARCHIVO_AGENDA = "agenda.txt";

    /**
     * Creates new form AgendaFrame
     */
    public AgendaFrame() {
        initComponents();// Inicializa los componentes de Swing (generado por NetBeans)
        // Agrupar los JRadioButtons para que solo uno pueda ser seleccionado
        buttonGroupBusqueda.add(rbNombre);
        buttonGroupBusqueda.add(rbApellido);
        rbNombre.setSelected(true); // Selecciona 'Nombre' por defecto
        mostrarRegistrosEnTextArea(); // Carga y muestra los registros al iniciar
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupBusqueda = new javax.swing.ButtonGroup();
        lbTitulo = new javax.swing.JLabel();
        lbApellido = new javax.swing.JLabel();
        lbNombre = new javax.swing.JLabel();
        lbEmail = new javax.swing.JLabel();
        lbTelefono = new javax.swing.JLabel();
        lbMensajes = new javax.swing.JLabel();
        lbBuscar = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtBuscar = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnMostrarTodo = new javax.swing.JButton();
        rbNombre = new javax.swing.JRadioButton();
        rbApellido = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaResultados = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbTitulo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbTitulo.setText("Administración de Contactos");

        lbApellido.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbApellido.setText("Apellido:");

        lbNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbNombre.setText("Nombre:");

        lbEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbEmail.setText("Email:");

        lbTelefono.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbTelefono.setText("Telefóno:");

        lbMensajes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbMensajes.setText("Mensajes / Resultados:");

        lbBuscar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbBuscar.setText("Buscar por:");

        txtNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtTelefono.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtBuscar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtApellido.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnGuardar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnMostrarTodo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnMostrarTodo.setText("Mostrar todo");
        btnMostrarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarTodoActionPerformed(evt);
            }
        });

        buttonGroupBusqueda.add(rbNombre);
        rbNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbNombre.setText("Nombre");
        rbNombre.setName("Nomb"); // NOI18N

        buttonGroupBusqueda.add(rbApellido);
        rbApellido.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbApellido.setText("Apellido");

        txtAreaResultados.setColumns(20);
        txtAreaResultados.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAreaResultados.setRows(5);
        jScrollPane1.setViewportView(txtAreaResultados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(397, 397, 397)
                        .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 821, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnMostrarTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lbMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(59, 59, 59)
                                        .addComponent(rbNombre)
                                        .addGap(166, 166, 166)
                                        .addComponent(rbApellido))
                                    .addComponent(jScrollPane1)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
                                .addComponent(txtTelefono, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtApellido, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtNombre, javax.swing.GroupLayout.Alignment.LEADING)))))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnActualizar, btnBuscar, btnEliminar, btnGuardar, btnMostrarTodo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbNombre)
                    .addComponent(rbApellido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMostrarTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        // --- Métodos de Lógica de Negocio y Archivo ---

    
     /**
     * Guarda un nuevo contacto en el archivo CSV.
     * Realiza validaciones básicas antes de escribir el registro.
     * @param nombre El nombre del contacto.
     * @param apellido El apellido del contacto.
     * @param telefono El número de teléfono del contacto.
     * @param email La dirección de correo electrónico del contacto.
     */
    private void guardarContacto(String nombre, String apellido, String telefono, String email) {
        if (nombre.isEmpty() || apellido.isEmpty() || telefono.isEmpty() || email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar si el contacto ya existe para evitar duplicados (por nombre y apellido)
        if (contactoExiste(nombre, apellido)) {
            JOptionPane.showMessageDialog(this, "Ya existe un contacto con ese nombre y apellido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(ARCHIVO_AGENDA, true))) {
            writer.write(String.format("%s,%s,%s,%s%n", nombre, apellido, telefono, email));
            JOptionPane.showMessageDialog(this, "Contacto guardado exitosamente.");
            limpiarCampos();
            mostrarRegistrosEnTextArea(); // Actualizar la lista mostrada
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el contacto: " + e.getMessage(), "Error de Archivo", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean contactoExiste(String nombre, String apellido) {
        try (Scanner scanner = new Scanner(new File(ARCHIVO_AGENDA))) {
            while (scanner.hasNextLine()) {
                String linea = scanner.nextLine();
                String[] partes = linea.split(",");
                if (partes.length >= 2 && partes[0].equalsIgnoreCase(nombre) && partes[1].equalsIgnoreCase(apellido)) {
                    return true;
                }
            }
        } catch (FileNotFoundException e) {
            // Archivo no existe, no hay contactos. No es un error crítico aquí.
        }
        return false;
    }
    
    private List<String[]> cargarContactos() {
        List<String[]> contactos = new ArrayList<>();
        try (Scanner scanner = new Scanner(new File(ARCHIVO_AGENDA))) {
            while (scanner.hasNextLine()) {
                String linea = scanner.nextLine();
                String[] partes = linea.split(",");
                if (partes.length == 4) { // Asegurar que tenga los 4 campos esperados
                    contactos.add(partes);
                }
            }
        } catch (FileNotFoundException e) {
            // El archivo no existe, simplemente retorna una lista vacía.
        }
        return contactos;
    }
    

    private void guardarContactos(List<String[]> contactos) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(ARCHIVO_AGENDA, false))) { // false para sobrescribir
            for (String[] contacto : contactos) {
                writer.write(String.format("%s,%s,%s,%s%n", contacto[0], contacto[1], contacto[2], contacto[3]));
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + e.getMessage(), "Error de Archivo", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buscarContactos(String criterioBusqueda, boolean porNombre) {
        txtAreaResultados.setText(""); // Limpiar resultados anteriores
        List<String[]> resultados = new ArrayList<>();
        List<String[]> contactos = cargarContactos();

        if (criterioBusqueda.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un valor para buscar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        for (String[] contacto : contactos) {
            String valorABuscar = porNombre ? contacto[0] : contacto[1]; // Nombre o Apellido
            if (valorABuscar.toLowerCase().contains(criterioBusqueda.toLowerCase())) {
                resultados.add(contacto);
            }
        }

        if (resultados.isEmpty()) {
            txtAreaResultados.setText("No se encontraron contactos para '" + criterioBusqueda + "'.");
        } else {
            StringBuilder sb = new StringBuilder();
            sb.append("Resultados de búsqueda para '").append(criterioBusqueda).append("':\n");
            for (String[] contacto : resultados) {
                sb.append("Nombre: ").append(contacto[0])
                  .append(", Apellido: ").append(contacto[1])
                  .append(", Teléfono: ").append(contacto[2])
                  .append(", Email: ").append(contacto[3]).append("\n");
            }
            txtAreaResultados.setText(sb.toString());
        }
    }

    private void actualizarContacto(String nombreOriginal, String apellidoOriginal, String nuevoNombre, String nuevoApellido, String nuevoTelefono, String nuevoEmail) {
        if (nuevoNombre.isEmpty() || nuevoApellido.isEmpty() || nuevoTelefono.isEmpty() || nuevoEmail.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos para la actualización.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        List<String[]> contactos = cargarContactos();
        boolean encontrado = false;
        for (int i = 0; i < contactos.size(); i++) {
            String[] contacto = contactos.get(i);
            if (contacto[0].equalsIgnoreCase(nombreOriginal) && contacto[1].equalsIgnoreCase(apellidoOriginal)) {
                contactos.set(i, new String[]{nuevoNombre, nuevoApellido, nuevoTelefono, nuevoEmail});
                encontrado = true;
                break;
            }
        }

        if (encontrado) {
            guardarContactos(contactos);
            JOptionPane.showMessageDialog(this, "Contacto actualizado exitosamente.");
            limpiarCampos();
            mostrarRegistrosEnTextArea();
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró el contacto original para actualizar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void eliminarContacto(String nombre, String apellido) {
        List<String[]> contactos = cargarContactos();
        List<String[]> contactosActualizados = new ArrayList<>();
        boolean encontrado = false;

        for (String[] contacto : contactos) {
            if (!contacto[0].equalsIgnoreCase(nombre) || !contacto[1].equalsIgnoreCase(apellido)) {
                contactosActualizados.add(contacto);
            } else {
                encontrado = true;
            }
        }

        if (encontrado) {
            guardarContactos(contactosActualizados);
            JOptionPane.showMessageDialog(this, "Contacto eliminado exitosamente.");
            limpiarCampos();
            mostrarRegistrosEnTextArea();
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró el contacto a eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void mostrarRegistrosEnTextArea() {
        txtAreaResultados.setText(""); // Limpiar el área antes de mostrar
        List<String[]> contactos = cargarContactos();
        if (contactos.isEmpty()) {
            txtAreaResultados.setText("No hay contactos en la agenda.");
            return;
        }

        StringBuilder sb = new StringBuilder();
        sb.append("--- Lista de Contactos ---\n");
        for (String[] contacto : contactos) {
            sb.append("Nombre: ").append(contacto[0])
              .append(", Apellido: ").append(contacto[1])
              .append(", Teléfono: ").append(contacto[2])
              .append(", Email: ").append(contacto[3]).append("\n");
        }
        txtAreaResultados.setText(sb.toString());
    }

    private void limpiarCampos() {
        txtNombre.setText("");
        txtApellido.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        txtBuscar.setText("");
    }
    
    
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardarContacto(txtNombre.getText(), txtApellido.getText(), txtTelefono.getText(), txtEmail.getText());
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String criterio = txtBuscar.getText();
        boolean porNombre = rbNombre.isSelected();
        buscarContactos(criterio, porNombre);
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // Para actualizar, pedimos el nombre y apellido ORIGINALES del contacto
        // y luego usamos los valores actuales de los JTextField para los nuevos datos.
        String nombreOriginal = JOptionPane.showInputDialog(this, "Ingrese el nombre del contacto a actualizar:");
        String apellidoOriginal = JOptionPane.showInputDialog(this, "Ingrese el apellido del contacto a actualizar:");

        if (nombreOriginal != null && !nombreOriginal.isEmpty() && apellidoOriginal != null && !apellidoOriginal.isEmpty()) {
            actualizarContacto(nombreOriginal, apellidoOriginal, 
                               txtNombre.getText(), txtApellido.getText(), 
                               txtTelefono.getText(), txtEmail.getText());
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar el nombre y apellido del contacto a actualizar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        String nombreEliminar = JOptionPane.showInputDialog(this, "Ingrese el nombre del contacto a eliminar:");
        String apellidoEliminar = JOptionPane.showInputDialog(this, "Ingrese el apellido del contacto a eliminar:");

        if (nombreEliminar != null && !nombreEliminar.isEmpty() && apellidoEliminar != null && !apellidoEliminar.isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar a " + nombreEliminar + " " + apellidoEliminar + "?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                eliminarContacto(nombreEliminar, apellidoEliminar);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar el nombre y apellido del contacto a eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnMostrarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarTodoActionPerformed
        mostrarRegistrosEnTextArea();
    }//GEN-LAST:event_btnMostrarTodoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgendaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgendaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgendaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgendaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgendaFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnMostrarTodo;
    private javax.swing.ButtonGroup buttonGroupBusqueda;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbApellido;
    private javax.swing.JLabel lbBuscar;
    private javax.swing.JLabel lbEmail;
    private javax.swing.JLabel lbMensajes;
    private javax.swing.JLabel lbNombre;
    private javax.swing.JLabel lbTelefono;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JRadioButton rbApellido;
    private javax.swing.JRadioButton rbNombre;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextArea txtAreaResultados;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
